# Learning CoffeeScript

Seing and reading all the stuff about CoffeeScript, I thought it might be useful to get into that "language" in order to get a better understanding. There is a lot of material already online on http://coffeescript.org. This here are basically my notes of the Fluent Conference 2012 Talk about CoffeeScript by Gregg Pollack.  
_(I've not been there - unfortunately - but O'Reilly granted me access to the conf vid collection)_

## Setup

### Installation

 - Install node + npm
 - Install the CoffeeScript compiler: `$ npm install -g coffee-script`

### Usage

`$ coffee -c test.coffee`  
Produces test.js

`$ coffee -cw test.coffee`  
Every time `test.coffee` updates it will automatically re-compile it.

The same works for entire directories.

`$ coffee -c src -o js`  
Compiles all CoffeeScript files in `src` to the `js` folder.

`$ coffee -cw src -o js`  
..continuous compilation on every change of a file in src.


## Variables and Functions

### Named functions

**JS**

    var coffee = function coffee(){
    	return confirm("Ready for CoffeeScript?");
	};

**CS**

	coffee = ->
		confirm "Ready for CoffeeScript?"

CoffeeScript (CS) is intended instead of using the curly brackets. Indentation is normally either _2 spaces_ or _1 tab_.

`->` converts to `function()`

What also important is that in CS, functions _always have a return value_ which automatically is the last line in the function.

## Returning a string
If one would like to the return the answer (in the above function) as `string`, then in **JS** this would look like

	var coffee = function(){
		var result = confirm("Ready for CoffeeScript?");
		return "Your answer is " + result + "!";
	}

in **CS** instead

	coffee = ->
		result = confirm "Ready for CoffeeScript?"
		"Your answer is " + result + "!"

A variant is to write the string concatenation as follows

	"Your answer is #{result}!"

To **note**

 - No variable declaration needed
 - parenthesis are optional; `confirm("Ready...")` is equal to `confirm "Ready..."

### Calling functions

**Decl**

	coffee = ->

**Invocation**

	coffee()

---

**Decl**

	coffee = (message) ->

**Invocation**

	coffee("Yes")
	
	//alternatively
	coffee "Yes"

---

**Decl**

	coffee = (message, other) ->

**Invocation**

	coffee("Yes", 2)
	coffee "Yes", 2

### Optional params

Similar to C# where you can define optional parameters as

	public void SomeMethod(string x = "hello, world") { ... }

you can write in **CS**

	coffee = (message = "Ready for CoffeeScript") ->
		answer = confirm message
		"Your answer is #{answer}"

**Note**, no return statement is written explicitly, the _last line_ will be returned automatically.

## jQuery with CoffeeScript

The following jQuery JavaScript sample

	jQuery(function($){

		function changeTab(e){
			e.preventDefault();
			$("#tab li a.active").removeClass("active");
			$(this).addClass("active");
		}

		$("#tab ul li a").click(changeTab);
	});

Would translate to

	$ ->
		changeTab = (e) ->
			e.preventDefault()
			$("#tab li a.active").removeClass "active"
			$(@).addClass "active"

		$("#tab ul li a").click changeTab

**Note**

 - `jQuery(function($))` can be translated to `$ ->` or `jQuery ($) ->`
 - @ = this (shortcut)

Declaring a function inline like

	$("#tab ul li a").click(function(e){
		...
	});

translates to

	$("#tab ul li a").click (e) ->
		...

An interesting example (from an understanding point of view) is the jQuery[hover](http://api.jquery.com/hover/) function as it takes two functions as input. In CS this gets written as

	$(".drink li").hover(
		-> 
			$(@).find(".span").show()
		->
			$(@).find(".span").hide()

or alternatively by first separately declaring the functions.

	a = -> $(@).find("span").show();
	b = -> $(@).find("span").hide();

	$(".drink li").hover a, b

## Conditionals and Operators

### If statements

In **JS**

	if(age < 18)
		alert("Under 18");

**CS**

	if age < 18
		alert "Under 18"

	//or
	alert "Under 18" if age < 18

### Operators

<table class="table table-striped">
	<thead>
		<tr>
			<th>CoffeeScript
			<th>JavaScript
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>== or is
			<td>===
		</tr>
		<tr>
			<td>!= or isnt
			<td>!==
		</tr>
		<tr>
			<td>not
			<td>!
		</tr>
		<tr>
			<td>and
			<td>&&
		</tr>
		<tr>
			<td>or
			<td>||
		</tr>
		<tr>
			<td>true yes on
			<td>true
		</tr>
		<tr>
			<td>false no off
			<td>false
		</tr>
	</tbody>
</table>

This allows for statements like

	if paid() and coffee() is on then pour()

	addCaffeine() if not Decaf()
	addCaffeine() unless Decaf()

###Chained comparisons
...can also be written very nicely.

	if(2 < newLevel && newLevel < 5){ ... }

in CF

	if 2 < newLevel < 5
		alert "In range"

### Switch

	message = switch cupsOfCoffee
		when 0 then "Asleep"
		when 1 then "Eyes Open"
		when 2 then "Buzzed"
		when 3 then "Dangerous"

### Existential Operators
A common operation in JavaScript is to check on whether something is _defined and not null_. In CoffeeScript there exists an operator for this, namely

	if someVariable?
		alert "It is defined"

Another nice semplicifation is to initialize some default value if it hasn't been set yet.

	if not cupsOfCoffee?
		cupsOfCoffee = 0

	//or
	cupsOfCoffee = 0 if not cupsOfCoffee?

	//or
	cupsOfCoffee = 0 unless cupsOfCoffee?

	//or most simply
	cupsOfCoffee ?= 0

Similarly, a function should only be called on an object if that object actually exists/is defined:

	if coffeePot?
		coffeePot.brew()

	coffeePot?.brew()

In addition, this can be used also in combination with function invocation, i.e. to call a given function on an object only if it actually exists:

	vehicle.startEngine?().shiftGear?()

which is extremely more expressive than the JavaScript alternative

	var _base;

	if (typeof vehicle.startEngine === "function") {
	  if (typeof (_base = vehicle.startEngine()).shiftGear === "function") {
	    _base.shiftGear();
	  }
	}

## Ranges
		