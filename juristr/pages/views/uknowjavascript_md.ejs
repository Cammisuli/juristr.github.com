# Do You Know JavaScript?
Do you? I'm into JavaScript now for more than one year, probably since one year trying to dive really deep as I use it on a daily basis at work. But always again, I come across stuff I didn't know yet. Interestingly I found [this webpage](http://www.w2lessons.com/2011/04/you-dont-know-javascript.html) listing a couple of things you have to know, dividing them into basic, intermediate and advanced level. They do, however, not cover any JavaScript web development points like DOM interaction, jQuery and so on.

Below are the points and my personal evaluation which (hopefully) changes over time.

## Basic Level
- Knowing the syntax of basic programming tools such as loops, if statements, try/catch, etc.
- Understanding function definitions including the various ways they can be defined and assigned, as well as anonymous functions
- Understanding basic scope principles, global (window) scope versus object scope (closures excluded)
- Understanding the role of context and the use of the 'this' variable
- Understanding the different ways to instantiate and declare an object as well as functions as objects
- Understanding JavaScript comparison operators like '<', '>', '==', '===',  what is falsy, and how object and string comparison works, as well as casting
- Array indexing for object attributes and functions and how this differs from actual arrays (object literals vs. array literals)

## Intermediate Level
- Understanding timers, how they work, and when/how they can be useful as well as asynchronous method execution
- In depth knowledge on callbacks and function application such as the 'call' and 'apply' methods for controlling context and function argument passing
- Understanding JSON notation and the 'eval' function
- Understanding closures, how they affect the performance of your code, and how they can be used to create private variables, along with the lovely (function(){})() call
- AJAX and object serialization

## Advanced Level
- Understanding a methods 'arguments' variable and how it can be used to overload functions through arguments.length and make recursive calls through arguments.callee. It should be noted that use of arguments.callee can be dangerous as ECMAScript 5 Strict Mode doesn't support it, although both jQuery (up to 1.4) and Dojo take advantage of it. 
- Advanced closures such as self-memoizing functions, currying, and partially applied functions
- Function and html prototyping, the prototype chain, and how to use base JavaScript objects and functions (e.g. Array) to minimize coding
- Object type and the use of instanceof and typeof
- Regular expressions and expression compiling
- With statements and why you shouldn't use them
- The most difficult part of all, knowing how to tie all these tools together into clean, robust, fast, maintainable, and cross browser compatible code. 

