# <section class="last-changed">August 14, 2012</section> Setting up Git with TFS
<div id="toc"></div>
Today [Microsoft announced](http://blogs.msdn.com/b/bharry/archive/2012/08/13/announcing-git-integration-with-tfs.aspx) their git support for TFS that allows you to work with TFS as well as Git on the same TFS project.
This tutorial briefly links all the stuff you need for getting started.

### Change History
<div id="versionhistory"></div>

## Download
Download the latest version from [Codeplex](http://gittf.codeplex.com/). You should have JRE in your path as well as which you can either download from

- http://msysgit.github.com/ or
- http://windows.github.com

## Setup on Windows
I extracted the git-tf zip file I got and placed it somewhere in my Programs folder. Then I pointed the "Environment Variables" to the directory s.t. I can use it from the command line.

If you now open a new Command Prompt you should get something like this

	Microsoft Windows [Version 6.1.7601]
	Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

	C:\Users\jstrumpfloh>git tf
	usage: git-tf [--version] [--help] [--quiet|-q|--verbose] [<command...>]

	The git-tf commands are:
	   help       Displays usage information
	   clone      Initializes a git repository from a TFS path
	   configure  Configures an existing git repository to add to TFS
	   checkin    Checks in changes to a TFS folder
	   fetch      Fetch the latest code from TFS into FETCH_HEAD
	   pull       Pulls the latest code from TFS and merge/rebase the changes into master
	   shelve     Shelves the changes to a TFS folder (Beta)

**Done**, now you can clone your repo like

	git tf clone http://yourtfsserver/tfs $/path/to/your/project

## Some Tipps and Tricks

### Checkin Locking and No-lock options

At the end of several changes you perform a checkin using

	git tf checkin

to submit your changes to the TFS server. In that case it might happen that you get a message like

	git tf: Could not lock $/...

The reason for this is that when performing a checkin, git tf attempts to lock the entire _root folder_, that is the repo path basically you cloned into your git repo.

### Deep clone
Cloning with `--deep` option. The [deep option](http://gittf.codeplex.com/wikipage?title=Clone&referringTitle=Home) is used to clone _each TFS changeset_ for the cloned path into the new git repo while a _normal clone_ only fetches the latest one.

> For this to work correctly your 20 commits need to be checkin in sequentially in Tfs in order. So if we do not have lock in place and we start checking in the first changeset, then the second and another user (user2) while checking in your commits decided they want to checkin too .. what will happen is that the other user's checkin will be inserted in between your commits and thus the history in TFS does not reflect the true history any more because the changeset of User2 was checked in between your changes.   
Having locks ensures that the TFS history is correct always when operating in deep mode.  
[http://gittf.codeplex.com/workitem/7](http://gittf.codeplex.com/workitem/7)

As a workaround one could add the `--no-lock` option which avoids locking like

	git tf --no-lock checkin

## Links
- [Official docs](http://gittf.codeplex.com/)


  