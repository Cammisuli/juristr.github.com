/* angular2-moment / v0.0.4 / (c) 2015 Uri Shaked / MIT Licence */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/// <reference path="node_modules/angular2/bundles/typings/angular2/angular2.d.ts" />
/// <reference path="typings/moment/moment.d.ts" />
var angular2_1 = require('angular2/angular2');
var moment_ = require('moment');
// under systemjs, moment is actually exported as the default export, so we account for that
var moment = moment_['default'] || moment_;
var TimeAgoPipe = (function () {
    function TimeAgoPipe(_cdRef) {
        this._cdRef = _cdRef;
    }
    TimeAgoPipe.prototype.supports = function (value) {
        return value instanceof Date || moment.isMoment(value);
    };
    TimeAgoPipe.prototype.transform = function (value, args) {
        var _this = this;
        var momentInstance = moment(value);
        this._removeTimer();
        var timeToUpdate = this._getSecondsUntilUpdate(momentInstance) * 1000;
        this._currentTimer = setTimeout(function () { return _this._cdRef.markForCheck(); }, timeToUpdate);
        return moment(value).from(moment());
    };
    TimeAgoPipe.prototype.onDestroy = function () {
        this._removeTimer();
    };
    TimeAgoPipe.prototype._removeTimer = function () {
        if (this._currentTimer) {
            clearTimeout(this._currentTimer);
            this._currentTimer = null;
        }
    };
    TimeAgoPipe.prototype._getSecondsUntilUpdate = function (momentInstance) {
        var howOld = Math.abs(moment().diff(momentInstance, 'minute'));
        if (howOld < 1) {
            return 1;
        }
        else if (howOld < 60) {
            return 30;
        }
        else if (howOld < 180) {
            return 300;
        }
        else {
            return 3600;
        }
    };
    TimeAgoPipe = __decorate([
        angular2_1.Pipe({ name: 'amTimeAgo', pure: false }), 
        __metadata('design:paramtypes', [angular2_1.ChangeDetectorRef])
    ], TimeAgoPipe);
    return TimeAgoPipe;
})();
exports.TimeAgoPipe = TimeAgoPipe;
//# sourceMappingURL=TimeAgoPipe.js.map